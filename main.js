var{defineProperty:Q,getOwnPropertyNames:$,getOwnPropertyDescriptor:F}=Object,G=Object.prototype.hasOwnProperty;var X=new WeakMap,U=(j)=>{var k=X.get(j),q;if(k)return k;if(k=Q({},"__esModule",{value:!0}),j&&typeof j==="object"||typeof j==="function")$(j).map((z)=>!G.call(k,z)&&Q(k,z,{get:()=>j[z],enumerable:!(q=F(j,z))||q.enumerable}));return X.set(j,k),k};var Y=(j,k)=>{for(var q in k)Q(j,q,{get:k[q],enumerable:!0,configurable:!0,set:(z)=>k[q]=()=>z})};var v={};Y(v,{default:()=>W});module.exports=U(v);var J=require("obsidian"),A={customDirectory1:"",customDirectory2:"",customDirectory3:""},V={WEEK:7,MONTH:30,YEAR:365},C=86400000;class W extends J.Plugin{settings;getAllNotes(){return this.app.vault.getMarkdownFiles()}getNotesFromPastDays(j){let k=Date.now()-j*C;return this.app.vault.getMarkdownFiles().filter((z)=>z.stat.ctime>=k)}getNotesFromPastWeek(){return this.getNotesFromPastDays(V.WEEK)}getNotesFromPastMonth(){return this.getNotesFromPastDays(V.MONTH)}getNotesFromPastYear(){return this.getNotesFromPastDays(V.YEAR)}getNotesFromDirectory(j){return this.app.vault.getMarkdownFiles().filter((q)=>q.path.startsWith(j))}getRandomNote(j){if(j.length===0)return null;let k=Math.floor(Math.random()*j.length);return j[k]}async openRandomNote(j,k){if(j.length===0){new J.Notice(`No notes found ${k}!`);return}let q=this.getRandomNote(j);if(q)try{await this.app.workspace.getLeaf().openFile(q),new J.Notice(`Opened random note: ${q.basename}`)}catch(z){console.error("ObsiRandom: Failed to open note:",z),new J.Notice(`Failed to open note: ${q.basename}`)}}async executeRandomNoteCommand(j,k){let q=j();await this.openRandomNote(q,k)}async openRandomNoteFromVault(){await this.executeRandomNoteCommand(()=>this.getAllNotes(),"in the vault")}async openRandomRecentNote(){await this.executeRandomNoteCommand(()=>this.getNotesFromPastWeek(),"from the past 7 days")}async openRandomNoteFromMonth(){await this.executeRandomNoteCommand(()=>this.getNotesFromPastMonth(),"from the past month")}async openRandomNoteFromYear(){await this.executeRandomNoteCommand(()=>this.getNotesFromPastYear(),"from the past year")}async openRandomNoteFromCustomDirectory(j){let k=this.settings[`customDirectory${j}`];if(!k.trim()){new J.Notice(`Please set Custom Directory ${j} in plugin settings first!`);return}let q=this.getNotesFromDirectory(k);await this.openRandomNote(q,`in ${k} directory`)}async loadSettings(){this.settings=Object.assign({},A,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}removeCustomCommands(){[1,2,3].forEach((j)=>{let k=`${this.manifest.id}:open-random-custom-directory-${j}`;if(this.app.commands.commands[k])this.app.commands.removeCommand(k)})}addCustomCommands(){[1,2,3].forEach((j)=>{let k=this.settings[`customDirectory${j}`];if(k.trim())this.addCommand({id:`open-random-custom-directory-${j}`,name:`Random note from ${k}`,callback:()=>{this.openRandomNoteFromCustomDirectory(j)}})})}updateCommands(){this.removeCustomCommands(),this.addCustomCommands()}async onload(){await this.loadSettings(),[{id:"open-random-note",name:"Random note from vault",callback:()=>this.openRandomNoteFromVault()},{id:"open-random-recent-note",name:"Random note from past 7 days",callback:()=>this.openRandomRecentNote()},{id:"open-random-month-note",name:"Random note from past month",callback:()=>this.openRandomNoteFromMonth()},{id:"open-random-year-note",name:"Random note from past year",callback:()=>this.openRandomNoteFromYear()}].forEach((k)=>this.addCommand(k)),this.updateCommands(),this.addSettingTab(new Z(this.app,this))}onunload(){}}class Z extends J.PluginSettingTab{plugin;constructor(j,k){super(j,k);this.plugin=k}getAllDirectories(){let j=new Set;return this.app.vault.getAllLoadedFiles().forEach((q)=>{if(q.path.includes("/")){let z=q.path.split("/");for(let B=1;B<z.length;B++){let H=z.slice(0,B).join("/");if(H)j.add(H)}}}),Array.from(j).sort()}createDirectorySetting(j,k,q){let z=`customDirectory${k}`;new J.Setting(j).setName(`Custom Directory ${k}`).setDesc(`Select or enter directory path ${k}`).addDropdown((B)=>{B.addOption("","-- Select a directory --"),q.forEach((H)=>{B.addOption(H,H)}),B.setValue(this.plugin.settings[z]),B.onChange(async(H)=>{this.plugin.settings[z]=H,await this.plugin.saveSettings(),this.plugin.updateCommands()})}).addText((B)=>B.setPlaceholder("Or type custom path").setValue(this.plugin.settings[z]).onChange(async(H)=>{this.plugin.settings[z]=H,await this.plugin.saveSettings(),this.plugin.updateCommands()}))}display(){let{containerEl:j}=this;j.empty(),j.createEl("h2",{text:"ObsiRandom Settings"}),j.createEl("p",{text:"Configure custom directories to quickly access random notes from specific folders in your vault.",cls:"setting-item-description"}),j.createEl("h3",{text:"Available Commands"}),j.createEl("p",{text:"Use the command palette (Ctrl/Cmd + P) to access these commands:",cls:"setting-item-description"});let k=j.createEl("ul",{cls:"setting-item-description"});["Random note from vault","Random note from past 7 days","Random note from past month","Random note from past year"].forEach((B)=>{k.createEl("li",{text:B})}),[1,2,3].forEach((B)=>{let H=this.plugin.settings[`customDirectory${B}`];if(H.trim())k.createEl("li",{text:`Random note from ${H}`})}),j.createEl("hr",{cls:"setting-item-description"}),j.createEl("h3",{text:"Custom Directories"});let z=this.getAllDirectories();[1,2,3].forEach((B)=>{this.createDirectorySetting(j,B,z)})}}
